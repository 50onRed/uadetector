<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Usage of UADetector</title>
		<author email="andre.rouel@googlemail.com">André Rouél</author>
	</properties>
	<body>
		<section name="Usage">
			<h3>Requirements</h3>
			<p>This library depends on the Simple Logging Facade for Java (also known as SLF4J) to allowing the end user to plug
				in the desired logging framework at deployment time.
			</p>
			<p>This means that if the UADetector library is used also the SLF4J-API must exist in your classpath.</p>
			<a name="usage_in_a_servlet" />
			<h3>Usage in a simple Servlet</h3>
			<p>
				To use the library it must be added to your classpath. With Apache Maven you can start with
				<a href="quickstart.html">this guide</a>
				quickly.
			</p>
			<p>Then you should have access to the classes of the library. For example, you might want to make a Servlet as the
				following to detect an requesting client.
			</p>
			<source><![CDATA[package net.sf.uadetector.example;

import java.io.IOException;
import javax.servlet.*;
import net.sf.uadetector.UADetectorServiceFactory;
import net.sf.uadetector.UserAgent;
import net.sf.uadetector.UserAgentStringParser;

public class HelloServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		response.setContentType("text/html");
		response.setStatus(HttpServletResponse.SC_OK);

		PrintWriter out = response.getWriter();

		// Get an UserAgentStringParser and analyze the requesting client
		UserAgentStringParser parser = UADetectorServiceFactory.getResourceModuleParser();
		UserAgent agent = parser.parse(request.getHeader("User-Agent"));

		out.append("You're a <em>");
		out.append(agent.getName());
		out.append("</em> on <em>");
		out.append(agent.getOperatingSystem().getName());
		out.append("</em>!");
	}

}]]></source>
			<a name="improve_performance" />
			<h3>Improve Performance by Caching</h3>
			<p>
				Since the parsing of user agent strings is very processing costly, it's recommended to build a cache on top of the
				parser. You can use a simple
				<code>HashMap</code>
				or
				<i>Guava's</i>
				<code>CacheBuilder</code>
				for example.
			</p>
			<source><![CDATA[package to.noc.uadetector.example;

import java.util.concurrent.TimeUnit;
import net.sf.uadetector.UserAgent;
import net.sf.uadetector.UserAgentStringParser;
import net.sf.uadetector.service.UADetectorServiceFactory;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;

public final class CachedUserAgentStringParser implements UserAgentStringParser {

	private final UserAgentStringParser parser = UADetectorServiceFactory
							.getCachingAndUpdatingParserHolder();
	private final Cache<String, UserAgent> cache = CacheBuilder.newBuilder()
							.maximumSize(100)
							.expireAfterWrite(2, TimeUnit.HOURS)
							.build();

	@Override
	public String getDataVersion() {
		return parser.getDataVersion();
	}

	@Override
	public UserAgent parse(final String userAgentString) {
		UserAgent result = cache.getIfPresent(userAgentString);
		if (result == null) {
			result = parser.parse(userAgentString);
			cache.put(userAgentString, result);
		}
		return result;
	}

}]]></source>
			<h3>Demo</h3>
			<p>
				You can also find a hello world demo in the Source Content Management System (SCM) under
				<a target="_blank"
					href="https://sourceforge.net/p/uadetector/code/ci/b07e03f255e3374e557295279ba90bace2223d55/tree/examples/helloworld/">examples/helloworld</a>
				. Just try to load the source code from the SCM.
			</p>
		</section>
	</body>
</document>